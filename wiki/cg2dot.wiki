#summary Cg to dot converter
#labels Tool,Featured

== Introduction ==
The cg2dot utility is a converter from Xdebug cachegrind files to the [http://www.graphviz.org/ dot format].

The most handy dot viewer is José Fonseca's [http://code.google.com/p/jrfonseca/wiki/XDot xdot].

One of the main advantages over other utilities like KCacheGrind and WebGrind is the way cg2dot aggregates calls. It makes call graphs very compact, but still preserves their tree structure, so these graphs stay very clear. For example [http://code.google.com/p/xdebugtoolkit/source/browse/trunk/xdebugtoolkit/fixtures/2.php?r=92 this php code] being aggregated produces the following tree:

[http://xdebugtoolkit.googlecode.com/svn/wiki/aggregate_demo.png]

== Usage ==
{{{
$ ./cg2dot.py --help
Usage: cg2dot.py [options] file [file ...]

Options:
  -h, --help            show this help message and exit
  -t THRESHOLD, --threshold=THRESHOLD
                        remove fast tails that took less then this percent of
                        total execution time. Default is 1%.
  -a MODE, --aggregate=MODE
                        aggregation mode. Can have values "none" and "func-
                        file". The "none" means that aggregation will be
                        completely off. This is usually very memory wasting,
                        so use it very carefully especially with the xdot. The
                        "func-file" mode means that each call will be keyed by
                        (mapped to) file and function names of every call from
                        it's stack. Then all calls will be aggregated
                        (reduced) according to these keys. Default is "func-
                        file".
}}}

== Examples ==
render as png
{{{
./cg2dot.py some.cg | path_to_dot/dot -Tpng -osome.png
}}}

view in xdot
{{{
./cg2dot.py some.cg | path_to_xdot/xdot.py -
}}}

== Screenshots ==
[http://xdebugtoolkit.googlecode.com/svn/wiki/small_screenshot.png]

[Screenshots]

== Details ==


== Performance ==
cg2dot processes (lexer + tree builder + tree aggregator + dot generator) about 1.6mb of raw cg per second on Core™2 Duo P7350 2.0GHz.
Lexer takes about half of this time.